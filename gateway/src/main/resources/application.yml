server:
  port: ${API_GATEWAY_PORT}
spring:
  application:
    name: api-gateway
  zipkin:
    base-url: ${ZIPKIN_SERVER_ADDR}
  sleuth:
    sampler:
      probability: 1
  cloud:
    nacos:
      discovery:
        server-addr: ${NACOS_SERVER_ADDR}
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            # 允许携带认证信息
            # 允许跨域的源(网站域名/ip)，设置*为全部
            # 允许跨域请求里的head字段，设置*为全部
            # 允许跨域的method， 默认为GET和OPTIONS，设置*为全部
            # 跨域允许的有效期
            allow-credentials: true
            allowed-origins: "*"
            allowed-headers: "*"
            allowed-methods: "*"
            max-age: 3600
      discovery:
        locator:
          enabled: true  #开启从注册中心动态创建路由的功能，利用微服务名进行路由
      routes:
        - id: api_user_route #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://api-user  #uri以lb://开头（lb代表从注册中心获取服务)
          predicates:
            - Path=/user/**
        - id: api_websocket_route #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://api-websocket  #uri以lb://开头（lb代表从注册中心获取服务)
          predicates:
            - Path=/ws/**
        - id: api_article_route #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://api-article  #uri以lb://开头（lb代表从注册中心获取服务)
          predicates:
            - Path=/article/**
        - id: api_auth_route #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://api-auth  #uri以lb://开头（lb代表从注册中心获取服务)
          predicates:
            - Path=/auth/**
        - id: api_ws_route #路由的ID，没有固定规则但要求唯一，建议配合服务名
          uri: lb://api-websocket #uri以lb://开头（lb代表从注册中心获取服务)
          predicates:
            - Path=/ws/**
management:
  health:
    redis:
      enabled: false
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: ALWAYS
ribbon:
  eager-load:
    enabled: true
    clients: api-auth,api-user,api-gateway,api-cache
